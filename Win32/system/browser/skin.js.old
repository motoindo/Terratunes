	Ext.namespace('Ext.mediatypes');
	Ext.mediatypes.states = [[type_artist, 'Artiest', 'kies een artiest'],[type_album, 'Album', 'kies een album'],[type_song, 'Song', 'kies een liedje']];	
	Ext.form.XmlErrorReader = function(){
		Ext.form.XmlErrorReader.superclass.constructor.call(this, {
				record : 'field',
				success: '@success'
			}, [
				'id', 'msg'
			]
		);
	};
	

	var store = new Ext.data.Store({
		// load using HTTP
		url: '/include/ext/examples/grid/disks.xml',
		// the return will be XML, so lets set up a reader
		reader: new Ext.data.XmlReader({
			   // records will have an "Item" tag
			   record: 'disk', //'Item',
			   id: 'ASIN',
			   totalRecords: '@total'
		   }, [
			   // set up the fields mapping into the xml doc
			   // The first needs mapping, the others are very basic
			   {name: 'Author', mapping: 'ItemAttributes > Author'},
			   'Title', 'Manufacturer', 'ProductGroup'
		   ])
	});	
	
	
	Ext.extend(Ext.form.XmlErrorReader, Ext.data.XmlReader);
	Ext.onReady(function(){
		Ext.QuickTips.init();
		Ext.form.Field.prototype.msgTarget = 'side';


		var fs = new Ext.FormPanel({
			frame: true,
			title:'XML Form',
			labelAlign: 'left',
			labelWidth: 85,
			autoWidth:true,
			waitMsgTarget: true,
			// configure how to read the XML Data
			reader : new Ext.data.XmlReader({
				record : 'contact',
				success: '@success'
			}, [
				{name: 'first', mapping:'name/first'}, // custom mapping
				{name: 'last', mapping:'name/last'},
				'company', 'email', 'state',
				{name: 'dob', type:'date', dateFormat:'m/d/Y'} // custom data types
			]),
			// reusable eror reader class defined at the end of this file
			errorReader: new Ext.form.XmlErrorReader(),
			items: [
				new Ext.form.FieldSet({
					title: 'Contact Information',
					autoHeight: true,
					defaultType: 'textfield',
					items: [{
							fieldLabel: 'First Name',
							name: 'first',
							width:190
						}, {
							fieldLabel: 'Last Name',
							name: 'last',
							width:190
						}, {
							fieldLabel: 'Company',
							name: 'company',
							width:190
						}, {
							fieldLabel: 'Email',
							name: 'email',
							vtype:'email',
							width:190
						},
						new Ext.form.ComboBox({
							fieldLabel: 'Type',
							hiddenName:'mediatype',
							store: new Ext.data.ArrayStore({
								fields: ['typevalue', 'typedesc','typeblah'],
								data : Ext.mediatypes.states // from states.js
							}),
							valueField:'typevalue',
							displayField:'typeblah',
							typeAhead: true,
							mode: 'local',
							triggerAction: 'all',
							emptyText:'Zoek artiest, album of liedje...',
							selectOnFocus:true,
							width:190
						}),
						new Ext.form.DateField({
							fieldLabel: 'Date of Birth',
							name: 'dob',
							width:190,
							allowBlank:false
						})
					]
				})
			
			]
		});
		var grid = new Ext.grid.GridPanel({
			store: store,
			columns: [
				{header: "Author", width: 120, dataIndex: 'Author', sortable: true},
				{header: "Title", width: 180, dataIndex: 'Title', sortable: true},
				{header: "Manufacturer", width: 115, dataIndex: 'Manufacturer', sortable: true},
				{header: "Product Group", width: 100, dataIndex: 'ProductGroup', sortable: true}
			],
			renderTo:'example-grid',
			autoWidth:true,
			height:200
		});
*/		
		var panel = new Ext.Panel({
   			layout:'border',
			defaults: {
				collapsible: true,
				split: true,
				bodyStyle: 'padding:15px'
			},
			items: [{
				title: 'Footer',
				region: 'south',
				height: 150,
				minSize: 75,
				maxSize: 250,
				cmargins: '5 0 0 0'
			},{
				title: 'Navigation',
				region:'west',
				margins: '5 0 0 0',
				cmargins: '5 5 0 0',
				width: 175,
				minSize: 100,
				maxSize: 250
			},{
				title: 'Main Content',
				collapsible: false,
				region:'center',
				margins: '5 0 0 0'
			}],
			renderTo: 'dvPanel'
		});
        panel.doLayout();
		/*	
		store.load();
		
		// simple button add
		fs.addButton('Laad', function(){
			fs.getForm().load({url:'http://www.extjs.com/deploy/dev/examples/form/xml-form.xml', waitMsg:'Loading'});
		});
		// explicit add
		var submit = fs.addButton({
			text: 'Submit',
			disabled:true,
			handler: function(){
				fs.getForm().submit({url:'xml-errors.xml', waitMsg:'Saving Data...'});
			}
		});
		fs.render('form-ct');
		fs.on({
			actioncomplete: function(form, action){
				if(action.type == 'load'){
					submit.enable();
				}
			}
		});*/
});
